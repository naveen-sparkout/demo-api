{"version":3,"sources":["../../src/config/express.js"],"names":["app","use","morganMiddleware","morganChalk","express","json","limit","urlencoded","extended","require","err","winston","error","global","server","http","createServer","port","expressPort","normalizePort","config","PORT","listen","on","onError","onListening","corsOptionsDelegate","req","callback","corsOptions","allowedOrigins","includes","header","credentials","origin","errors","get","res","next","status","message","data","Error","errorHandler","allErrorHandler"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;;;;;AAFA,IAAMA,GAAG,GAAG,0BAAZ;AAKA;AACAA,GAAG,CAACC,GAAJ,CAAQC,mBAAiBC,WAAzB,E,CAEA;;AACAH,GAAG,CAACC,GAAJ,CAAQG,oBAAQC,IAAR,CAAa;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAb,CAAR,E,CAEA;;AACAN,GAAG,CAACC,GAAJ,CAAQG,oBAAQG,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;;AAEAC,OAAO,CAAC,UAAD,CAAP,CAAoB,UAACC,GAAD,EAAS;AACzB,MAAIA,GAAJ,EAAS;AACLC,wBAAQC,KAAR,CAAcF,GAAd;AACH,GAFD,MAEO;AACH;AACAG,IAAAA,MAAM,CAACC,MAAP,GAAgBC,iBAAKC,YAAL,CAAkBhB,GAAlB,CAAhB;AAGA;AACR;AACA;;AAEQa,IAAAA,MAAM,CAACI,IAAP,GAAcC,WAAW,CAACC,aAAZ,CAA0BC,MAAM,CAACC,IAAP,IAAe,MAAzC,CAAd;AAEAR,IAAAA,MAAM,CAACC,MAAP,CAAcQ,MAAd,CAAqBT,MAAM,CAACI,IAA5B,EAAkC,SAAlC;AACAJ,IAAAA,MAAM,CAACC,MAAP,CAAcS,EAAd,CAAiB,OAAjB,EAA0BL,WAAW,CAACM,OAAtC;AACAX,IAAAA,MAAM,CAACC,MAAP,CAAcS,EAAd,CAAiB,WAAjB,EAA8BL,WAAW,CAACO,WAA1C,EAbG,CAeH;;AACA,QAAIC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,QAAN,EAAmB;AACzC,UAAIC,WAAJ;AACA,UAAIC,cAAc,GAAG,CACjB,uBADiB,EAEjB,uBAFiB,EAGjB,uBAHiB,CAArB;;AAKA,UAAIA,cAAc,CAACC,QAAf,CAAwBJ,GAAG,CAACK,MAAJ,CAAW,QAAX,CAAxB,CAAJ,EAAmD;AAC/CH,QAAAA,WAAW,GAAG;AACVI,UAAAA,WAAW,EAAE,IADH;AAEVC,UAAAA,MAAM,EAAE;AAFE,SAAd;AAIH,OALD,MAKO;AACHL,QAAAA,WAAW,GAAG;AACVK,UAAAA,MAAM,EAAE;AADE,SAAd;AAGH;;AACDN,MAAAA,QAAQ,CAAC,IAAD,EAAOC,WAAP,CAAR;AACH,KAlBD;;AAmBA7B,IAAAA,GAAG,CAACC,GAAJ,CAAQ,sBAAKyB,mBAAL,CAAR;AACA1B,IAAAA,GAAG,CAACC,GAAJ,CAAQ,yBAAR;AACAD,IAAAA,GAAG,CAACC,GAAJ,CAAQ,+BAAR;AAEAY,IAAAA,MAAM,CAACsB,MAAP,GAAgB1B,OAAO,CAAC,UAAD,CAAvB;AACA,wBAAOT,GAAP;AAEAA,IAAAA,GAAG,CAACoC,GAAJ,CAAQ,GAAR,EAAa,UAACT,GAAD,EAAMU,GAAN,EAAWC,IAAX,EAAoB;AAC7BD,MAAAA,GAAG,CAAChC,IAAJ,CAAS;AACLkC,QAAAA,MAAM,EAAE,CADH;AAELC,QAAAA,OAAO,EAAE,2BAFJ;AAGLC,QAAAA,IAAI,EAAE;AAHD,OAAT;AAKH,KAND,EA1CG,CAkDH;;AACAzC,IAAAA,GAAG,CAACC,GAAJ,CAAQ,UAAC0B,GAAD,EAAMU,GAAN,EAAWC,IAAX,EAAoB;AACxB,UAAM5B,GAAG,GAAG,IAAIgC,KAAJ,CAAU,WAAV,CAAZ;AACAhC,MAAAA,GAAG,CAAC6B,MAAJ,GAAa,GAAb;AACAD,MAAAA,IAAI,CAAC5B,GAAD,CAAJ;AACH,KAJD,EAnDG,CAyDH;;AACA,QAAIiC,YAAY,GAAGlC,OAAO,CAAC,gBAAD,CAA1B;;AACAT,IAAAA,GAAG,CAACC,GAAJ,CAAQ0C,YAAY,CAACC,eAArB;AAEH;AACJ,CAjED;;eAoEe5C,G","sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport cookieParser from 'cookie-parser';\r\nimport http from 'http';\r\nimport morganMiddleware from './morgan';\r\nimport winston from './winston';\r\n\r\nconst app = express();\r\nimport * as expressPort from './expressPort';\r\nimport { routes } from \"./routes\";\r\n\r\n\r\n// Setup Request Info Logging in Console with Morgan\r\napp.use(morganMiddleware.morganChalk);\r\n\r\n// parse application/json\r\napp.use(express.json({ limit: '4mb' }));\r\n\r\n// parse application/x-www-form-urlencoded\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\nrequire('./config')((err) => {\r\n    if (err) {\r\n        winston.error(err);\r\n    } else {\r\n        // Create HTTP server.\r\n        global.server = http.createServer(app);\r\n\r\n\r\n        /**\r\n         * Get port from environment and store in Express.\r\n         */\r\n\r\n        global.port = expressPort.normalizePort(config.PORT || '3000');\r\n\r\n        global.server.listen(global.port, '0.0.0.0');\r\n        global.server.on('error', expressPort.onError);\r\n        global.server.on('listening', expressPort.onListening);\r\n\r\n        // CORS middleware\r\n        let corsOptionsDelegate = (req, callback) => {\r\n            let corsOptions;\r\n            let allowedOrigins = [\r\n                'http://localhost:3000',\r\n                'http://localhost:4200',\r\n                'http://localhost:8080',\r\n            ];\r\n            if (allowedOrigins.includes(req.header('Origin'))) {\r\n                corsOptions = {\r\n                    credentials: true,\r\n                    origin: true\r\n                };\r\n            } else {\r\n                corsOptions = {\r\n                    origin: false\r\n                };\r\n            }\r\n            callback(null, corsOptions);\r\n        };\r\n        app.use(cors(corsOptionsDelegate));\r\n        app.use(helmet());\r\n        app.use(cookieParser());\r\n\r\n        global.errors = require('./errors');\r\n        routes(app);\r\n\r\n        app.get('/', (req, res, next) => {\r\n            res.json({\r\n                status: 1,\r\n                message: 'server is up and running.',\r\n                data: {}\r\n            });\r\n        });\r\n\r\n        // catch 404 and forward to error handler\r\n        app.use((req, res, next) => {\r\n            const err = new Error('Not Found');\r\n            err.status = 404;\r\n            next(err);\r\n        });\r\n\r\n        // error handlers\r\n        let errorHandler = require('./errorHandler');\r\n        app.use(errorHandler.allErrorHandler);\r\n \r\n    }\r\n});\r\n\r\n\r\nexport default app"],"file":"express.js"}