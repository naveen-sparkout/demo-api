{"version":3,"sources":["../../src/config/validations.js"],"names":["errorFormatterV2","error","param","message","msg","value","location","nestedErrors","customValidators","isNumber","_","isArray","Array","isNumArray","array","isNum","forEach","isValidPercentage","arrayElemNotDuplicated","length","values","filter","index","iteratee","includes","arrayIsNotEmpty","isUserIdValid","test","isDeviceTypeValid","global","config","deviceTypes","isUserTypeValid","userTypes","isPhoneNumberValid","regex","IndoRegex","isLatLongValid","nonNegative","isValidDateAndTime","isValid","isValidDate","isValidEmailOrPhone","isValidCurrentOrFutureDate","date","currentDate","unix","isAfter","isValidEmail","isValidObjectId","checkForHexRegExp","RegExp","isValidDeviceType","isValidWhoWillValue","parseInt","isMessageContainsContent","isValidUrl","validUrl","isUri","validateAge","dob","years","diff","isValidName","name","isValidDistanceArea","isValidImageIndex","isValidSlotMinutes","minutes","isValidCurrentOrFutureUnixTimeStamp","moment","isValidAddressType","type","isArrayNotEmpty","isValidUnixTimeStamp","isBoolean","isValidPassword","isValidHour","isValidMinute","isValidMonth","isValidYear","year","options","validateRadius","reg"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport validUrl from 'valid-url';\r\n\r\nexport const errorFormatterV2 = error => ({\r\n    param: error.param,\r\n    message: error.msg,\r\n    value: error.value,\r\n    location: error.location,\r\n    nestedErrors: error.nestedErrors\r\n});\r\n\r\nexport const customValidators = {\r\n    isNumber: value => _.isNumber(value),\r\n    isArray: value => Array.isArray(value),\r\n    isNumArray: array => {\r\n        let isNum = true;\r\n        array.forEach(value => {\r\n            if (!_.isNumber(value)) isNum = false;\r\n        });\r\n        return isNum;\r\n    },\r\n    isValidPercentage: value => value >= 0 && value <= 100,\r\n    arrayElemNotDuplicated: array => {\r\n        if (array && array.length > 1) {\r\n            let values = _.filter(array, (value, index, iteratee) => _.includes(iteratee, value, index + 1));\r\n\r\n            if (values.length) return false;\r\n            else return true;\r\n        } else {\r\n            return true;\r\n        }\r\n    },\r\n    arrayIsNotEmpty: array => {\r\n        if (array && array.length) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isUserIdValid: value => /^(\\+\\d{1,3}[- ]?)?\\d{10}$/.test(value) ||\r\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(value),\r\n    isDeviceTypeValid: value => value == global.config.deviceTypes[0] || value == global.config.deviceTypes[1],\r\n    isUserTypeValid: value => value == global.config.userTypes[0] || value == global.config.userTypes[1],\r\n    isPhoneNumberValid: value => {\r\n        let regex = /^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?$/;\r\n        let IndoRegex = /^(\\+62 ((\\d{3}([ -]\\d{3,})([- ]\\d{4,})?)|(\\d+)))|(\\(\\d+\\) \\d+)|\\d{3}( \\d+)+|(\\d+[ -]\\d+)|\\d+$/;\r\n        return /^((\\+92)|(0092)|(92))-{0,1}\\d{3}-{0,1}\\d{7}$|^\\d{11}$|^\\d{4}-\\d{7}$/.test(value) || regex.test(value) || IndoRegex.test(value);\r\n    },\r\n    isLatLongValid: value => /^(\\-?\\d+(\\.\\d+)?),\\s*(\\-?\\d+(\\.\\d+)?)$/.test(value),\r\n    nonNegative: value => value >= 0,\r\n    isValidDateAndTime: value => moment(value).isValid(),\r\n    isValidDate: value => moment(value, 'DD-MM-YYYY').isValid(),\r\n    isValidEmailOrPhone: value => {\r\n        if (/^(\\+\\d{1,3}[- ]?)?\\d{10}$/.test(value)) {\r\n            return true;\r\n        } else if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isValidCurrentOrFutureDate: value => {\r\n        let date = moment(value);\r\n        let currentDate = moment().unix();\r\n        return moment(date).isAfter(currentDate);\r\n    },\r\n    isValidEmail: value => /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(value),\r\n    isValidObjectId: value => {\r\n        let checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\r\n\r\n        if (checkForHexRegExp.test(value)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isValidDeviceType: value => {\r\n        if (value === 'android' || value === 'ios' || value === 'web') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isValidWhoWillValue: value => {\r\n        value = parseInt(value);\r\n        if (value === 1 || value === 2 || value === 3) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isMessageContainsContent: ({ length }) => {\r\n        if (length > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isValidUrl: value => {\r\n        if (value) {\r\n            if (validUrl.isUri(value)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    },\r\n    validateAge: value => {\r\n        if (value) {\r\n            let dob = moment(value, 'DD-MM-YYYY');\r\n            let years = moment().diff(dob, 'years');\r\n            if (years >= 18) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    },\r\n    isValidName: name => {\r\n        let regex = /^[a-zA-Z ]{2,30}$/;\r\n        if (regex.test(name)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isValidDistanceArea: value => {\r\n        if (value) {\r\n            if (value > -1 && value < 501) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isValidImageIndex: value => {\r\n        if (value && (value > -1 && value <= 5)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isValidSlotMinutes: minutes => {\r\n        if (minutes === 0 || minutes === 15 || minutes === 30 || minutes === 45) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isValidCurrentOrFutureUnixTimeStamp: value => {\r\n        let date = moment.unix(value);\r\n        let currentDate = moment();\r\n        return moment(date).isAfter(currentDate);\r\n    },\r\n    isValidAddressType: type => {\r\n        if (type === 'Home' || type === 'Work' || type === 'Other') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    isArrayNotEmpty: ({ length }) => {\r\n        if (length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    isValidUnixTimeStamp: value => moment.unix(value).isValid(),\r\n    isBoolean: value => _.isBoolean(value),\r\n    isValidPassword: ({ length }) => {\r\n        if (length < 8) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    isValidHour: value => {\r\n        if (value.length < 0 || value > 23) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    isValidMinute: value => {\r\n        if (value.length < 0 || value > 59) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    isValidMonth: value => {\r\n        if (value < 0 || value > 11) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    isValidYear: value => {\r\n        if (value < 1900 || value > moment().year()) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    enum: (value, options) => {\r\n        if (options.includes(value)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    validateRadius: (value) => {\r\n        const reg = /^\\d+$/;\r\n        if (reg.test(value)) {\r\n            if (value <= 0) {\r\n                return false;\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n};"],"file":"validations.js"}