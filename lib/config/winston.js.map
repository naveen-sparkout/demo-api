{"version":3,"sources":["../../src/config/winston.js"],"names":["options","winston","LoggerOptions","format","combine","timestamp","errors","stack","colorize","splat","printf","level","label","message","rest","namespace","errStack","transports","Console","process","env","NODE_ENV","File","filename","logger","createLogger"],"mappings":";;;;;;;;;;;AAAA;;;AAEA,IAAMA,OAAO,GAAGC,oBAAQC,aAAR,GAAwB;AACpCC,EAAAA,MAAM,EAAEF,oBAAQE,MAAR,CAAeC,OAAf,CACJH,oBAAQE,MAAR,CAAeE,SAAf,CAAyB;AAAEF,IAAAA,MAAM,EAAE;AAAV,GAAzB,CADI,EAEJF,oBAAQE,MAAR,CAAeG,MAAf,CAAsB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAtB,CAFI,EAGJN,oBAAQE,MAAR,CAAeK,QAAf,EAHI,EAIJP,oBAAQE,MAAR,CAAeM,KAAf,EAJI,EAKJR,oBAAQE,MAAR,CAAeO,MAAf,CACI,gBAA0D;AAAA,QAAvDL,SAAuD,QAAvDA,SAAuD;AAAA,QAA5CM,KAA4C,QAA5CA,KAA4C;AAAA,QAArCC,KAAqC,QAArCA,KAAqC;AAAA,QAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,QAArBN,KAAqB,QAArBA,KAAqB;AAAA,QAAXO,IAAW;AACtD,QAAMC,SAAS,GAAGH,KAAK,cAAOA,KAAP,SAAkB,EAAzC;AACA,QAAMI,QAAQ,GAAGT,KAAK,eAAQA,KAAR,IAAkB,EAAxC,CAFsD,CAGtD;;AACA,sBAAWF,SAAX,eAAyBM,KAAzB,eAAmCI,SAAnC,cAAgDF,OAAhD,cAA2DG,QAA3D;AACH,GANL,CALI,CAD4B;AAepCC,EAAAA,UAAU,EAAE,CACR;AACA,MAAIhB,oBAAQgB,UAAR,CAAmBC,OAAvB,CAA+B;AAAEP,IAAAA,KAAK,EAAEQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,OAAxC,GAAkD;AAA3D,GAA/B,CAFQ,EAGR,IAAIpB,oBAAQgB,UAAR,CAAmBK,IAAvB,CAA4B;AAAEC,IAAAA,QAAQ,EAAE,gBAAZ;AAA8BZ,IAAAA,KAAK,EAAE;AAArC,GAA5B,CAHQ,EAIR,IAAIV,oBAAQgB,UAAR,CAAmBK,IAAvB,CAA4B;AAAEC,IAAAA,QAAQ,EAAE,gBAAZ;AAA8BZ,IAAAA,KAAK,EAAE;AAArC,GAA5B,CAJQ;AAfwB,CAAxC;;AAuBA,IAAMa,MAAM,GAAGvB,oBAAQwB,YAAR,CAAqBzB,OAArB,CAAf;;eACewB,M","sourcesContent":["import winston from 'winston';\r\n\r\nconst options = winston.LoggerOptions = {\r\n    format: winston.format.combine(\r\n        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n        winston.format.errors({ stack: true }),\r\n        winston.format.colorize(),\r\n        winston.format.splat(),\r\n        winston.format.printf(\r\n            ({ timestamp, level, label, message, stack, ...rest }) => {\r\n                const namespace = label ? `(${label})` : '';\r\n                const errStack = stack ? `\\n${stack}` : '';\r\n                // const meta = rest && Object.keys(rest).length ? `\\n${JSON.stringify(rest, undefined, 2)}` : '';\r\n                return `[${timestamp}] ${level}: ${namespace} ${message} ${errStack}`;\r\n            }\r\n        )\r\n    ),\r\n    transports: [\r\n        // new winston.transports.Console({ level: process.env.NODE_ENV === 'production' ? 'error' : 'debug' }),\r\n        new winston.transports.Console({ level: process.env.NODE_ENV === 'production' ? 'debug' : 'debug' }),\r\n        new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\r\n        new winston.transports.File({ filename: 'logs/debug.log', level: 'debug' }),\r\n    ]\r\n};\r\n\r\nconst logger = winston.createLogger(options);\r\nexport default logger;"],"file":"winston.js"}